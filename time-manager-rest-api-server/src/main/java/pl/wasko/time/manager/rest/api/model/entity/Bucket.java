/*
 * Created on 2020-07-10 ( Time 09:27:28 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
// This Bean has a basic Primary Key (not composite) 

package pl.wasko.time.manager.rest.api.model.entity;

import org.hibernate.annotations.Where;
import pl.wasko.time.manager.rest.api.model.enumeration.HistoryElementEnum;
import pl.wasko.time.manager.rest.api.model.enumeration.RoleEnum;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "buckets"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="buckets")
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="Buckets.countAll", query="SELECT COUNT(x) FROM Bucket x" )
} )
@Where(clause = "deleted='0'")
public class Bucket implements Serializable, Archivable
{
    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id_bucket", nullable=false)
    private Integer    idBucket     ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="bucket_name", nullable=false, length=255)
    private String     bucketName   ;

    @Column(name="description", nullable=false, length=255)
    private String     description  ;

    @Temporal(TemporalType.DATE)
    @Column(name="creation_date", nullable=false)
    private Date       creationDate ;

    @Column(name="max_tasks", nullable=false)
    private Integer    maxTasks     ;

    @Column(name="deleted", nullable=false)
    private Boolean    deleted      ;

	// "ownerId" (column "owner_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="owner_id", referencedColumnName="id_user")
    private User user;

    @OneToMany(mappedBy="bucket", targetEntity= CoOwner.class)
    private List<CoOwner> listOfCoOwners;

    @OneToMany(mappedBy="bucket", targetEntity= Task.class)
    private List<Task> listOfTasks ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public Bucket()
    {
		super();
    }

    public Integer getId() {
        return idBucket;
    }

    public Integer getIdUser() {
        return user.getIdUser();
    }

    public Bucket(String bucketName, String description, Date creationDate, User user, Integer maxTasks, Boolean deleted) {
        this.bucketName = bucketName;
        this.description = description;
        this.creationDate = creationDate;
        this.user = user;
        this.maxTasks = maxTasks;
        this.deleted = deleted;
    }


    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setIdBucket( Integer idBucket )
    {
        this.idBucket = idBucket ;
    }
    public Integer getIdBucket()
    {
        return this.idBucket;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : bucket_name ( VARCHAR ) 
    public void setBucketName( String bucketName )
    {
        this.bucketName = bucketName;
    }
    public String getBucketName()
    {
        return this.bucketName;
    }

    //--- DATABASE MAPPING : description ( VARCHAR ) 
    public void setDescription( String description )
    {
        this.description = description;
    }
    public String getDescription()
    {
        return this.description;
    }

    //--- DATABASE MAPPING : creation_date ( DATE ) 
    public void setCreationDate( Date creationDate )
    {
        this.creationDate = creationDate;
    }
    public Date getCreationDate()
    {
        return this.creationDate;
    }

    //--- DATABASE MAPPING : max_tasks ( INT ) 
    public void setMaxTasks( Integer maxTasks )
    {
        this.maxTasks = maxTasks;
    }
    public Integer getMaxTasks()
    {
        return this.maxTasks;
    }

    //--- DATABASE MAPPING : deleted ( BIT ) 
    public void setDeleted( Boolean deleted )
    {
        this.deleted = deleted;
    }
    public Boolean getDeleted()
    {
        return this.deleted;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setUser(User user)
    {
        this.user = user;
    }
    public User getUser()
    {
        return this.user;
    }

    public Integer getUserId()
    {
        return this.user.getIdUser();
    }

    public void setListOfCoOwners( List<CoOwner> listOfCoOwners )
    {
        this.listOfCoOwners = listOfCoOwners;
    }
    public List<CoOwner> getListOfCoOwners()
    {
        return this.listOfCoOwners;
    }

    public void setListOfTasks( List<Task> listOfTasks )
    {
        this.listOfTasks = listOfTasks;
    }
    public List<Task> getListOfTasks()
    {
        return this.listOfTasks;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(idBucket);
        sb.append("]:"); 
        sb.append(bucketName);
        sb.append("|");
        sb.append(description);
        sb.append("|");
        sb.append(creationDate);
        sb.append("|");
        sb.append(maxTasks);
        sb.append("|");
        sb.append(deleted);
        return sb.toString(); 
    }

    public Boolean isUserCoOwner(User user) {
        return listOfCoOwners.stream().map(CoOwner::getUser).anyMatch(it -> it.equals(user));
    }

    public Boolean isUserOwner(User user) {
        return (this.user.getActive().equals(true) && this.user.equals(user)) ||
                (this.user.getActive().equals(false) && user.getRole().getRoleName().equals(RoleEnum.ADMIN));
    }

    @Override
    public Integer getArchivableId() {
        return this.idBucket;
    }

    @Override
    public HistoryElementEnum getHistoryElement() {
        return HistoryElementEnum.BUCKET;
    }
}
