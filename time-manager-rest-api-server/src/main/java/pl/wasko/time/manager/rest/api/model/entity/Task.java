/*
 * Created on 2020-07-10 ( Time 09:27:29 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
// This Bean has a basic Primary Key (not composite) 

package pl.wasko.time.manager.rest.api.model.entity;

import org.hibernate.annotations.*;
import pl.wasko.time.manager.rest.api.model.enumeration.HistoryElementEnum;

import pl.wasko.time.manager.rest.api.model.enumeration.RoleEnum;
import pl.wasko.time.manager.rest.api.model.enumeration.StatusEnum;

import java.io.Serializable;

import java.util.Date;
import java.util.List;

import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 * Persistent class for entity stored in table "tasks"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@NamedEntityGraph(name = "Task.subsStatusPriority",
        attributeNodes = {@NamedAttributeNode("listOfSubscriptions"),
                @NamedAttributeNode("priority"), @NamedAttributeNode("status")}
)
@Table(name="tasks")
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="Tasks.countAll", query="SELECT COUNT(x) FROM Task x" )
} )
@Where(clause = "deleted='0'")
public class Task implements Serializable, Archivable
{
    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id_task", nullable=false)
    private Integer    idTask       ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="deadline", nullable=false)
    private Date       deadline     ;

    @Column(name="task_name", nullable=false, length=255)
    private String     taskName   ;

    @Column(name="description", nullable=false, length=255)
    private String     description  ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="begin_time", nullable=false)
    private Date       beginTime    ;

    @Column(name="estimated_end_time", nullable=false)
    private String       estimatedEndTime ;

    @Column(name="total_time", nullable=false)
    private String       totalTime    ;

    @Column(name="deleted", nullable=false)
    private Boolean    deleted      ;

	// "idBucket" (column "id_bucket") is not defined by itself because used as FK in a link 
	// "idUser" (column "id_user") is not defined by itself because used as FK in a link 
	// "statusId" (column "status_id") is not defined by itself because used as FK in a link 
	// "priorityId" (column "priority_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="task", targetEntity= Timer.class)
    //@OrderColumn(name="id_timer")
    private List<Timer> listOfTimers;

    @ManyToOne
    @JoinColumn(name="status_id", referencedColumnName="id_status")
    private Status status;

    @ManyToOne
    @JoinColumn(name="id_bucket", referencedColumnName="id_bucket")
    private Bucket bucket;

    @OneToMany(mappedBy="task", targetEntity= Share.class)
    private List<Share> listOfShares;

    @OneToMany(mappedBy="task", targetEntity= Subscription.class)
    //@OrderColumn(name="id_sub")
    private List<Subscription> listOfSubscriptions;

    @OneToMany(mappedBy="task", targetEntity= EndRequest.class)
    private List<EndRequest> listOfEndRequests;

    @ManyToOne
    @JoinColumn(name="priority_id", referencedColumnName="id_priority")
    private Priority priority;

    @ManyToOne
    @JoinColumn(name="id_user", referencedColumnName="id_user")
    private User user;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public Task()
    {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setIdTask( Integer idTask )
    {
        this.idTask = idTask ;
    }
    public Integer getIdTask()
    {
        return this.idTask;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : deadline ( DATETIME ) 
    public void setDeadline( Date deadline )
    {
        this.deadline = deadline;
    }
    public Date getDeadline()
    {
        return this.deadline;
    }

    //--- DATABASE MAPPING : begin_time ( DATETIME ) 
    public void setBeginTime( Date beginTime )
    {
        this.beginTime = beginTime;
    }
    public Date getBeginTime()
    {
        return this.beginTime;
    }

    //--- DATABASE MAPPING : estimated_end_time ( TIME ) 
    public void setEstimatedEndTime( String estimatedEndTime )
    {
        this.estimatedEndTime = estimatedEndTime;
    }
    public String getEstimatedEndTime()
    {
        return this.estimatedEndTime;
    }

    //--- DATABASE MAPPING : total_time ( TIME ) 
    public void setTotalTime( String totalTime )
    {
        this.totalTime = totalTime;
    }
    public String getTotalTime()
    {
        return this.totalTime;
    }

    //--- DATABASE MAPPING : deleted ( BIT ) 
    public void setDeleted( Boolean deleted )
    {
        this.deleted = deleted;
    }
    public Boolean getDeleted()
    {
        return this.deleted;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfTimers( List<Timer> listOfTimers )
    {
        this.listOfTimers = listOfTimers;
    }
    public List<Timer> getListOfTimers()
    {
        return this.listOfTimers;
    }

    public void setStatus(Status status)
    {
        this.status = status;
    }
    public Status getStatus()
    {
        return this.status;
    }

    public void setBucket(Bucket bucket)
    {
        this.bucket = bucket;
    }
    public Bucket getBucket()
    {
        return this.bucket;
    }

    public void setListOfShares( List<Share> listOfShares )
    {
        this.listOfShares = listOfShares;
    }
    public List<Share> getListOfShares()
    {
        return this.listOfShares;
    }

    public void setListOfSubscriptions( List<Subscription> listOfSubscriptions )
    {
        this.listOfSubscriptions = listOfSubscriptions;
    }
    public List<Subscription> getListOfSubscriptions()
    {
        return this.listOfSubscriptions;
    }

    public void setPriority(Priority priority)
    {
        this.priority = priority;
    }
    public Priority getPriority()
    {
        return this.priority;
    }

    public void setUser(User user)
    {
        this.user = user;
    }
    public User getUser()
    {
        return this.user;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(idTask);
        sb.append("]:"); 
        sb.append(deadline);
        sb.append("|");
        sb.append(beginTime);
        sb.append("|");
        sb.append(estimatedEndTime);
        sb.append("|");
        sb.append(totalTime);
        sb.append("|");
        sb.append(deleted);
        return sb.toString(); 
    }

    public String getTaskName() {
        return taskName;
    }

    public void setTaskName(String taskName) {
        this.taskName = taskName;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Boolean isUserCoOwner(User user) {
        return this.bucket.isUserOwner(user) || this.bucket.isUserCoOwner(user) ||
                listOfShares.stream().map(Share::getUser).anyMatch(it -> it.equals(user));
    }

    public Boolean isUserOwner(User user) {
        return (this.user.getActive().equals(true) && this.user.equals(user)) ||
                (this.user.getActive().equals(false) && user.getRole().getRoleName().equals(RoleEnum.ADMIN));
    }

    public Boolean isTaskActive() {
        return this.status.getStatusName().equals(StatusEnum.NEW) || this.status.getStatusName().equals(StatusEnum.IN_PROGRESS);
    }

    @Override
    public Integer getArchivableId() {
        return this.idTask;
    }

    @Override
    public HistoryElementEnum getHistoryElement() {
        return HistoryElementEnum.TASK;
    }

    public List<EndRequest> getListOfEndRequests() {
        return listOfEndRequests;
    }

    public void setListOfEndRequests(List<EndRequest> listOfEndRequests) {
        this.listOfEndRequests = listOfEndRequests;
    }
}
